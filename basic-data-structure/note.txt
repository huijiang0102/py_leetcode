1. collections.Counter(string/list), inherits the functions of dict
   结果按照频率倒序排序
   collections.Counter(iterable).most_common(n)->返回一个top n list（降序）:
      [('a', 5), ('r', 2), ('b', 2)]
      for k,v in [('a', 5), ('r', 2), ('b', 2)]: blahblah
   内部约等于sorted()，复杂度O(nlog(n))
   * 解压，*collections.Counter(iterable).most_common(n) -> ('a', 5), ('r', 2), ('b', 2),
   只有解压之后可以用zip,不然一个list没法zip

2. collections.OrderedDict()
   记住key的插入顺序，可用作sort dict
   d = dict(), OrderedDict(sorted(s.items(),k=lambda x:x[0])) -> sort by key
   pop(key) -> value
   popitem(last=True) -> (key,value) LIFO
   popitem(last=False) -> (key,value) FIFO

3. isdigit(), only integers are, '0.3' or '13 45' are not

4. bisect
   bisect.bisect_left: returns the leftmost place that can be inserted
   bisect .bisect_right: returns the rightmost place, = bisect.bisect

5. 元素删除
   #list
   list.remove(element)->get ValueError is this element not in the list| if dup, only remove one element
   list.pop(index)->get IndexError if index out of range
   del list[index]/ del list[index:endindex) get IndexError
   NOT!!!!!!!lista - listb
   #dict
   del dict[element]
   #set
   s = set([1, 2, 3, 4]) -> s: {1,2,3,4}
   set.remove(element)->KeyError
   set,discard(element)->No Error
   set.pop()->remove any arbitrary element, Key Error
   seta - setb

6. 元素插入
   #list
   list.append(element)
   list.insert(index,element)把本位伤的原来数字往右挤，如果>=len，都放在len位置上
   list.extend(elements)
   lista + listb
   #set
   set.add(element)
   NOT!!!!!!!seta + setb


7. 元素查找
   #string
   string.find(substring)-> index/-1
   stirng.index(substring)-> index/Error
   stirng.startswith(substring) -> index
   #list
   list只有index，和string一致

8. set
   只能寸不可变例如tuple
   a |= b union
   a &= b intersection
   a -= b deduction
   seta.update(setb), 把setb里的元素放入seta中
9. tuple(immutable)
   单个元素写成(num,)

10.深浅拷贝
   好像正常都是深拷贝，例如list, func(list.pop()) or something, will change this list
   递归的时候传参也是深拷贝，对同一个地址的东西修改
   浅拷贝：like res.append(tmpList(:))

11.小函数
   #map
   num = int, list(map(int,str(num))),因为map（左，iterable）
   #join
   list of int:num, int(''.join(num))
   ''.join(list),list of string可以，list of int不行，必须用map(str,num)
   #zip
   zip(iterable):
      ||||zip([a,b],c) 可用 for((n1,n2),n3 in zip([a,b],c))取出||||
      ||||zip(*iterable) : zip(*list)||||
      python 3 不能实施以上操作，老老实实用list(zip())来取吧
      a = [1,2,3]
      b = [4,5,6]
      a1, a2 = zip(*zip(a,b))
      print(*zip(a,b)) -> (1, 4) (2, 5) (3, 6)
      print(list(zip(a,b))) -> [(1, 4), (2, 5), (3, 6)]，只有这种情况才能用for

12.string(immutable)
   no sth like string[i] = 'a'
   string * int -> 来重复重复重复
   sorted(string) -> list of chars

13.itertools
   itertools.permutation([1,2,3],2):
      (1,2),(1,3),(2,1),(2,3),(3,1),(3,2)
   itertools.combinations([1,2,3],2):
      (1,2),(1,3),(2,3)
   itertools.chain(*iterables):
       return iterators NOT LIST
       chain('ABC', 'DEF') --> A B C D E F
       chain(*list)

   list = [[[1,2],[5,6]],[[1,3]],[[4,10]]]   sorted(chain(*list))->[[1, 2], [1, 3], [4, 10], [5, 6]]
   list = [[1,2],[5,6],[1,3],[4,10]]    sorted(chain(*list))->[1, 1, 2, 3, 4, 5, 6, 10]

    iter(list)->变成迭代器,next(iterable)

14. dict
    dict.keys(), dict.values()->按原来顺序
    counter.keys(),counter.values()按iterable的顺序来的
    dict.get(key, default=None)
    dict.setdefault(key, default=None), 果字典中包含有给定键，则返回该键对应的值，否则返回为该键设置的值。

15. file
    #with模块执行结束自动关闭
    # Read the entire file as a single string
    with open('somefile.txt', 'rt') as f:
        data = f.read()

    # Iterate over the lines of the file
    with open('somefile.txt', 'rt') as f:
        for line in f:
            # process line
    #写文件并且覆盖
    # Write chunks of text data
    with open('somefile.txt', 'wt') as f:
        f.write(text1)
        f.write(text2)
        ...

    # Redirected print , 内容输出至文件
    with open('somefile.txt', 'wt') as f:
        print(line1, file=f)
        print(line2, file=f)
        ...

    #不用with模块语句,手动close
    f = open('somefile.txt', 'rt')
    data = f.read()
    f.close()

16. sorted(list)->list
    list.sort()->nothing

17. min(list[str])->返回长度最短的str

18. boolean
    boolean可以直接相乘（自动转化为int 0/1）

19. json
    # encode into json datatype
    json.dumps()
    json.dumps({'a': 'Runoob', 'b': 7}, sort_keys=True, indent=4, separators=(',', ': '))
    # decode json
    json.loads(object)
    object -> dict

20. backtrack <=> dp， 做不出来的就用递归做
    backtrack解决比方说有很多中情况，要一个一个试，有些会有conflict，比如interval conflicts
    array: 双指针左右同时扫/找乱序出现的位置/找peak/找shortest distance 42 845 581 244
    path：bfs每次在原本path上做改动
    访问点限制问题：用visited list简单作出


21. scope 问题：
        694 list mutable，所以append list这种操作会对它本身造成影响
        就像传list+【3】这种是对list不造成影响一样
        string，immutable，所以无论是+=什么，无法改变本身
    nested function variable scope:
        def a():
            x = 1
            def b():
                print(x)
                x = 2
        if comment out x=2, it goes well. Otherwise, referenced before assigned error, this b
        will be considered as the inner function b.
        never use assign(=) for such kind of variable, should include b as an argument/global
        注意你这个argument传进去是不是每次会回到原来状态，比如赋值在调用之后
        but other operations like .append() works

22. heapq
    with O(log n) push and O(log n) pop
                                        0

                   1                                 2

           3               4                5               6

       7       8       9       10      11      12      13      14

     15 16   17 18   19 20   21 22   23 24   25 26   27 28   29 30
    https://fossies.org/dox/Python-3.7.1/heapq_8py_source.html
    # 如果是(1,2),(1,2,3)都是按照顺序比较，现比较第一位，再比较第二位
    插入删除都是O(log(n))
23. collections.deque
    可以从左右一起增删

24. math
    math.sqrt(x), x >= 0 otherwise error message

25. TreeNode
    TreeNode(None) 不能用 == None判断也不能用 not

26. bfs/dfs
    bfs用queue实现，最坏的情况空间复杂度O(n)
    当前状态，同层当前状态之前所有状态的子状态，同层当前状态之后的所有状态

    dfs的alternative method是stack, 需要借助一个递归工作栈，
    递归函数的空间复杂度，你可以简化理解为【递归栈的深度】
    如果我们的搜索树退化成为一条链，我们能认为DFS和BFS是完全等价的，
    那么反之，如果是一颗有n个节点的完全二叉树，DFS的空间需求是树的深度（约等于log n），
    而BFS的空间需求则近乎于n/2
    bfs/dfs如果是可以向四个方向延伸的话都是4^^n
27. union/found
    737
    1. parent[string] = string
    2. 对于每对pair，先用while string ! = parent[string] 找出目前的终极爸爸
        至于为什么要用这个，是因为现在因为在不断更新，所以不是所有的parent【】
        都得到的是终极爸爸。
       替换一个parent为另一个，这样两个string都指向一个爸爸（合并）
       parent[string1] = string2
    3. 找大家的终极爸爸
28. tree
    leaf!!!（path sum等）
        只有左右子树都是空才能为leaf，不能在node为空的时候就判断上一级为leaf
    TRIE TREE:
        m is the maximum string length, n is the number of keys in tree
        search in O(m) time

29. ord()/chr()ascii/unichr()(unicode)

30. segmentree
    The root's start and end is given by build method.
    The left child of node A has start=A.left, end=(A.left + A.right) / 2.
    The right child of node A has start=(A.left + A.right) / 2 + 1, end=A.right.
                   [1,  6]
                 /        \
          [1,  3]           [4,  6]
          /     \           /     \
       [1, 2]  [3,3]     [4, 5]   [6,6]
       /    \           /     \
    [1,1]   [2,2]     [4,4]   [5,5]

31. enumerate(nums,start_position)
    start_position = 1不代表跳过第一个，而是i从1开始递增
    如果想要从第一个（rather than 0）开始遍历，要用nums[1:]

32. [::-1] use a foor loop to implement, thus both time/space complexity O(n)

33. for-else
    for n in range(99,81,-1):  
        root = sqrt(n)  
        if root == int(root):  
            print n  
            break  
    else:  
        print"Didn't find it!"  

    在for循环完整完成后才执行else；如果中途从break跳出，则连else一起跳出。

34. find anagram，用ord(c)在list中做index存times
